{"version":3,"sources":["C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/actions/users.ts","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/components/index.ts","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/components/users-list/users-list.html","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/components/users-list/users-list.scss","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/components/users-list/users-list.ts","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/containers/users-page.ts","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/effects/users.ts","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/reducers/index.ts","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/reducers/users.ts","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/users-routing.module.ts","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/users.module.ts","C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/users.service.ts"],"names":[],"mappings":"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","file":"users.module.chunk.js","sourcesContent":["import { Action } from '@ngrx/store';\r\nimport {UsersListItem} from '../models/users-list-item.model'\r\nimport { UsersListPagingModel } from '../models/users-list-paging.model';\r\nimport { UsersList } from \"../models/user-list.model\";\nimport { AddEmployee } from '../models/add-employee.model';\nimport { InviteEmployee } from '../models/invite-employee.model';\r\n\r\nexport const GET = '[Users] Get users';\r\nexport const GET_COMPLETE = '[Users] Get Complete';\r\nexport const ADD = '[Users] Add user';\r\nexport const ADD_COMPLETE = '[Users] Add User Complete';\nexport const EDIT = '[Users] Edit user';\nexport const EDIT_COMPLETE = '[Users] Edit User Complete';\nexport const INVITE = '[Users] Invite user';\r\nexport const INVITE_COMPLETE = '[Users] Invite User Complete';\nexport const REINVITE = '[Users] ReInvite user';\nexport const REINVITE_COMPLETE = '[Users] ReInvite user Complete';\r\n\r\n\r\nexport class GetAction implements Action {\r\n    type = GET;\r\n    constructor(public payload: UsersListPagingModel) { }\r\n}\r\n\r\nexport class GetCompleteAction implements Action {\r\n    type = GET_COMPLETE;\r\n    constructor(public payload: UsersList) { }\r\n}\r\n\r\nexport class SaveAction implements Action {\r\n    type = ADD;\r\n    constructor(public payload: AddEmployee) { }\r\n}\r\n\r\nexport class SaveCompleteAction implements Action {\r\n    type = ADD_COMPLETE;\r\n\r\n    constructor(public payload: any) { }\r\n}\n\nexport class EditAction implements Action {\r\n    type = EDIT;\r\n    constructor(public payload: UsersListItem) { }\r\n}\r\n\r\nexport class EditCompleteAction implements Action {\r\n    type = EDIT_COMPLETE;\r\n\r\n    constructor(public payload: any) { }\r\n}\n\nexport class InviteAction implements Action {\r\n    type = INVITE;\r\n\r\n    constructor(public payload: InviteEmployee) { }\r\n}\r\n\r\nexport class InviteCompleteAction implements Action {\r\n    type = INVITE_COMPLETE;\r\n\r\n    constructor(public payload: any) { }\r\n}\n\nexport class ReInviteAction implements Action {\r\n    type = REINVITE;\r\n\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class ReInviteCompleteAction implements Action {\r\n    type = REINVITE_COMPLETE;\r\n\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type Actions = GetAction\r\n    | GetCompleteAction\r\n    | SaveAction\r\n    | SaveCompleteAction\n    | InviteAction\n    | InviteCompleteAction\n    | EditAction\r\n    | EditCompleteAction\n    | ReInviteAction\n    | ReInviteCompleteAction;\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/actions/users.ts","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { UsersListComponent } from './users-list/users-list';\r\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\r\nimport { TranslateModule, TranslateLoader } from \"@ngx-translate/core\";\r\nimport { TranslateHttpLoader } from \"@ngx-translate/http-loader\";\r\nimport { HttpLoaderFactory } from '../../services/HttpLoaderFactory';\r\n\r\n\r\n\r\n\r\nexport const COMPONENTS = [\r\n    UsersListComponent\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        PaginationModule.forRoot(),\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        RouterModule,\r\n        HttpClientModule,\r\n        TranslateModule.forRoot({\r\n            loader: {\r\n                provide: TranslateLoader,\r\n                useFactory: HttpLoaderFactory,\r\n                deps: [HttpClient]\r\n            }\r\n        })\r\n    ],\r\n    declarations: COMPONENTS,\r\n    exports: COMPONENTS,\r\n})\r\nexport class ComponentsModule { }\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/components/index.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-md-12\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-header\\\">\\r\\n        {{ 'EmployeeHeader' | translate }}\\r\\n      </div>\\r\\n      <div class=\\\"card-block\\\" *ngIf=\\\"isLoaded\\\">\\r\\n        <div class=\\\"form-group float-right\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#addModal\\\">\\r\\n            {{ 'AddEmployee' | translate }}\\r\\n          </button>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#inviteModal\\\">\\r\\n            {{ 'InviteEmployee' | translate }}\\r\\n          </button>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <table class=\\\"table table-hover table-outline mb-0 hidden-sm-down\\\" *ngIf=\\\"isLoaded\\\">\\r\\n            <thead class=\\\"thead-default\\\">\\r\\n              <tr>\\r\\n                <td class=\\\"text-center\\\">{{ 'EmployeeId' | translate }} <a [ngClass]=\\\"getArrowClass('id')\\\" (click)=\\\"order.emit('id')\\\"></a></td>\\r\\n                <td class=\\\"text-center\\\">{{ 'FirstName' | translate }} <a [ngClass]=\\\"getArrowClass('FirstName')\\\" (click)=\\\"order.emit('FirstName')\\\"></a></td>\\r\\n                <td class=\\\"text-center\\\">{{ 'LastName' | translate }} <a [ngClass]=\\\"getArrowClass('LastName')\\\" (click)=\\\"order.emit('LastName')\\\"></a></td>\\r\\n                <td class=\\\"text-center\\\">{{ 'Email' | translate }} <a [ngClass]=\\\"getArrowClass('EmailAddress')\\\" (click)=\\\"order.emit('EmailAddress')\\\"></a></td>\\r\\n                <td class=\\\"text-center\\\">{{ 'Phone' | translate }} <a [ngClass]=\\\"getArrowClass('PhoneNumber')\\\" (click)=\\\"order.emit('PhoneNumber')\\\"></a></td>\\r\\n                <td class=\\\"text-center\\\">{{ 'Last4SS' | translate }} <a [ngClass]=\\\"getArrowClass('SocialSecurityNumber')\\\" (click)=\\\"order.emit('SocialSecurityNumber')\\\"></a></td>\\r\\n                <td class=\\\"text-center\\\">{{ 'IsAdmin' | translate }} <a [ngClass]=\\\"getArrowClass('IsAdmin')\\\" (click)=\\\"order.emit('IsAdmin')\\\"></a></td>\\r\\n                <td class=\\\"text-center\\\">{{ 'IsActive' | translate }} <a [ngClass]=\\\"getArrowClass('IsActive')\\\" (click)=\\\"order.emit('IsActive')\\\"></a></td>\\n                <td class=\\\"text-center\\\">{{ 'IsRegistrated' | translate }} <a [ngClass]=\\\"getArrowClass('IsRegistrate')\\\" (click)=\\\"order.emit('IsRegistrate')\\\"></a></td>\\r\\n                <td class=\\\"text-center\\\">{{ 'CalculateOvertime' | translate }} <a [ngClass]=\\\"getArrowClass('IsOvertimeCalculated')\\\" (click)=\\\"order.emit('IsOvertimeCalculated')\\\"></a></td>\\r\\n                <td class=\\\"text-center\\\">{{ 'Action' | translate }} </td>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let user of users\\\">\\r\\n                <td class=\\\"text-center\\\">{{user.Id}}</td>\\r\\n                <td class=\\\"text-center\\\">{{user.FirstName}}</td>\\r\\n                <td class=\\\"text-center\\\">{{user.LastName}}</td>\\r\\n                <td class=\\\"text-center\\\">{{user.Email}}</td>\\r\\n                <td class=\\\"text-center\\\">{{user.Phone}}</td>\\r\\n                <td class=\\\"text-center\\\">{{user.Last4Ss}}</td>\\r\\n                <td class=\\\"text-center\\\" *ngIf=\\\"user.IsAdmin\\\"><span class=\\\"badge badge-success timego-status\\\">{{user.IsAdmin ? 'Yes' : 'No'}}</span></td>\\r\\n                <td class=\\\"text-center\\\" *ngIf=\\\"!user.IsAdmin\\\"><span class=\\\"badge badge-danger timego-status\\\">{{user.IsAdmin ? 'Yes' : 'No'}}</span></td>\\r\\n                <td class=\\\"text-center\\\" *ngIf=\\\"user.IsActive\\\"><span class=\\\"badge badge-success timego-status\\\">{{user.IsActive ? 'Yes' : 'No'}}</span></td>\\r\\n                <td class=\\\"text-center\\\" *ngIf=\\\"!user.IsActive\\\"><span class=\\\"badge badge-danger timego-status\\\">{{user.IsActive ? 'Yes' : 'No'}}</span></td>\\n\\n                <td class=\\\"text-center\\\" *ngIf=\\\"user.IsRegistrate\\\"><span class=\\\"badge badge-success timego-status\\\">{{'Registrated'}}</span></td>\\n                <td class=\\\"text-center\\\" *ngIf=\\\"!user.IsRegistrate && oldIvite(user)\\\"><span class=\\\"badge badge-danger timego-status\\\">{{'No Confirmed'}}</span></td>\\r\\n                <td class=\\\"text-center\\\" *ngIf=\\\"!user.IsRegistrate && !oldIvite(user)\\\"><span class=\\\"badge badge-warning timego-status\\\">{{'Waiting'}}</span></td>\\n\\r\\n                <td class=\\\"text-center\\\" *ngIf=\\\"user.IsOvertimeCalculated\\\"><span class=\\\"badge badge-success timego-status\\\">{{user.IsOvertimeCalculated ? 'Yes' : 'No'}}</span></td>\\r\\n                <td class=\\\"text-center\\\" *ngIf=\\\"!user.IsOvertimeCalculated\\\"><span class=\\\"badge badge-danger timego-status\\\">{{user.IsOvertimeCalculated ? 'Yes' : 'No'}}</span></td>\\r\\n                <td class=\\\"text-center\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#editModal\\\" (click)=\\\"cloneEditUser(user)\\\">{{ 'Edit' | translate }}</button>\\n                    <button [disabled]=\\\"user.IsRegistrate\\\" type=\\\"button\\\" class=\\\"btn btn-sm btn-success\\\" (click)=\\\"reinvite.emit(user.Id)\\\">{{ 'ReInvite' | translate }}</button>\\n                </td>\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <pagination [totalItems]=\\\"pagingModel.count\\\" [(ngModel)]=\\\"pagingModel.page\\\" (pageChanged)=\\\"changePage.emit({\\r\\n            orderBy: pagingModel.orderBy,\\r\\n            page: $event.page,\\r\\n            pageSize: pagingModel.pageSize,\\r\\n            IsAscending: pagingModel.IsAscending,\\r\\n            count: pagingModel.count,\\r\\n            IsOrder: false})\\\"></pagination>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<div class=\\\"modal fade\\\" id=\\\"addModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"add employee\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header timego-modal\\\">\\r\\n        <h4 class=\\\"modal-title\\\">{{ 'Add' | translate }} {{ 'Employee' | translate }}</h4>\\r\\n        <button type=\\\"button\\\"  (click)=\\\"cleanAddModel()\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\r\\n          <span aria-hidden=\\\"true\\\">×</span>\\r\\n        </button>\\r\\n      </div>\\r\\n      <div [formGroup]=\\\"addform\\\">\\r\\n        <div class=\\\"modal-body timego-modal\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'FirstName' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"icon-user\\\"></i>\\r\\n              </span>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"FirstName\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'FirstName' | translate }}\\\" [(ngModel)]=\\\"addEmployee.FirstName\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"addform.controls.FirstName.errors && (addform.controls.FirstName.dirty || addform.controls.FirstName.touched)\\\">\\r\\n              <p *ngIf=\\\"addform.controls.FirstName.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'LastName' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"icon-user\\\"></i>\\r\\n              </span>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"LastName\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'LastName' | translate }}\\\" [(ngModel)]=\\\"addEmployee.LastName\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"addform.controls.LastName.errors && (addform.controls.LastName.dirty || addform.controls.LastName.touched)\\\">\\r\\n              <p *ngIf=\\\"addform.controls.LastName.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'Email' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"\\\">@</i>\\r\\n              </span>\\r\\n              <input type=\\\"email\\\" formControlName=\\\"Email\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'Email' | translate }}\\\" [(ngModel)]=\\\"addEmployee.Email\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"addform.controls.Email.errors && (addform.controls.Email.dirty || addform.controls.Email.touched)\\\">\\r\\n              <p *ngIf=\\\"addform.controls.Email.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n              <p *ngIf=\\\"addform.controls.Email.errors.pattern\\\">{{ 'EmailNotValid' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'Password' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"icon-lock\\\"></i>\\r\\n              </span>\\r\\n              <input type=\\\"password\\\" formControlName=\\\"Password\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'Password' | translate }}\\\" [(ngModel)]=\\\"addEmployee.Password\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"addform.controls.Password.errors && (addform.controls.Password.dirty || addform.controls.Password.touched)\\\">\\r\\n              <p *ngIf=\\\"addform.controls.Password.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'PhoneNumber' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"icon-phone\\\"></i>\\r\\n              </span>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"PhoneNumber\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'PhoneNumber' | translate }}\\\" [(ngModel)]=\\\"addEmployee.PhoneNumber\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"addform.controls.PhoneNumber.errors && (addform.controls.PhoneNumber.dirty || addform.controls.PhoneNumber.touched)\\\">\\r\\n              <p *ngIf=\\\"addform.controls.PhoneNumber.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\n          <div class=\\\"cntr\\\">\\r\\n            <label for=\\\"admin\\\" class=\\\"label-cbx\\\">\\r\\n              <input id=\\\"admin\\\" type=\\\"checkbox\\\" class=\\\"invisible\\\" [(ngModel)]=\\\"addEmployee.IsAdmin\\\">\\r\\n              <div class=\\\"checkbox\\\">\\r\\n                <svg width=\\\"20px\\\" height=\\\"20px\\\" viewBox=\\\"0 0 20 20\\\">\\r\\n                  <path d=\\\"M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z\\\"></path>\\r\\n                  <polyline points=\\\"4 11 8 15 16 6\\\"></polyline>\\r\\n                </svg>\\r\\n              </div>\\r\\n              <span>{{ 'IsAdmin' | translate }}</span>\\r\\n            </label>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n          <button *ngIf=\\\"!addform.valid\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"add.emit(addEmployee)\\\" disabled>{{ 'Add' | translate }}</button>\\r\\n          <button *ngIf=\\\"addform.valid\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"add.emit(addEmployee)\\\">{{ 'Add' | translate }}</button>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"cleanAddModel()\\\" data-dismiss=\\\"modal\\\">{{ 'Close' | translate }}</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<div class=\\\"modal fade\\\" id=\\\"inviteModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"invite employee\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header timego-modal\\\">\\r\\n        <h4 class=\\\"modal-title\\\">{{ 'Invite' | translate }} {{ 'Employee' | translate }}</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"cleanInviteModel()\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\r\\n          <span aria-hidden=\\\"true\\\">×</span>\\r\\n        </button>\\r\\n      </div>\\r\\n      <div [formGroup]=\\\"inviteform\\\">\\r\\n        <div class=\\\"modal-body timego-modal\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'FirstName' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"icon-user\\\"></i>\\r\\n              </span>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"FirstName\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'FirstName' | translate }}\\\" [(ngModel)]=\\\"inviteModel.FirstName\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"inviteform.controls.FirstName.errors && (inviteform.controls.FirstName.dirty || inviteform.controls.FirstName.touched)\\\">\\r\\n              <p *ngIf=\\\"inviteform.controls.FirstName.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'LastName' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"icon-user\\\"></i>\\r\\n              </span>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"LastName\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'LastName' | translate }}\\\" [(ngModel)]=\\\"inviteModel.LastName\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"inviteform.controls.LastName.errors && (inviteform.controls.LastName.dirty || inviteform.controls.LastName.touched)\\\">\\r\\n              <p *ngIf=\\\"inviteform.controls.LastName.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'Email' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"\\\">@</i>\\r\\n              </span>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'Email' | translate }}\\\" [(ngModel)]=\\\"inviteModel.Email\\\" formControlName=\\\"Email\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"inviteform.controls.Email.errors && (inviteform.controls.Email.dirty || inviteform.controls.Email.touched)\\\">\\r\\n              <p *ngIf=\\\"inviteform.controls.Email.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n              <p *ngIf=\\\"inviteform.controls.Email.errors.pattern\\\">{{ 'EmailNotValid' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\n          <div class=\\\"cntr\\\">\\r\\n            <label for=\\\"adminInvite\\\" class=\\\"label-cbx\\\">\\r\\n              <input id=\\\"adminInvite\\\" type=\\\"checkbox\\\" class=\\\"invisible\\\" [(ngModel)]=\\\"inviteModel.IsAdmin\\\">\\r\\n              <div class=\\\"checkbox\\\">\\r\\n                <svg width=\\\"20px\\\" height=\\\"20px\\\" viewBox=\\\"0 0 20 20\\\">\\r\\n                  <path d=\\\"M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z\\\"></path>\\r\\n                  <polyline points=\\\"4 11 8 15 16 6\\\"></polyline>\\r\\n                </svg>\\r\\n              </div>\\r\\n              <span>{{ 'IsAdmin' | translate }}</span>\\r\\n            </label>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n          <button *ngIf=\\\"!inviteform.valid\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"invite.emit(inviteModel)\\\" disabled>{{ 'Invite' | translate }}</button>\\r\\n          <button *ngIf=\\\"inviteform.valid\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"invite.emit(inviteModel)\\\">{{ 'Invite' | translate }}</button>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"cleanInviteModel()\\\" data-dismiss=\\\"modal\\\">{{ 'Close' | translate }}</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\n<div class=\\\"modal fade\\\" id=\\\"editModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"edit employee\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header timego-modal\\\">\\r\\n        <h4 class=\\\"modal-title\\\">{{ 'Edit' | translate }} {{ 'Employee' | translate }}</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\r\\n          <span aria-hidden=\\\"true\\\">×</span>\\r\\n        </button>\\r\\n      </div>\\r\\n      <div [formGroup]=\\\"editform\\\">\\r\\n        <div class=\\\"modal-body timego-modal\\\">\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'FirstName' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"icon-user\\\"></i>\\r\\n              </span>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"FirstName\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'FirstName' | translate }}\\\" [(ngModel)]=\\\"editModel.FirstName\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"editform.controls.FirstName.errors && (editform.controls.FirstName.dirty || editform.controls.FirstName.touched)\\\">\\r\\n              <p *ngIf=\\\"editform.controls.FirstName.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'LastName' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"icon-user\\\"></i>\\r\\n              </span>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"LastName\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'LastName' | translate }}\\\" [(ngModel)]=\\\"editModel.LastName\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"editform.controls.LastName.errors && (editform.controls.LastName.dirty || editform.controls.LastName.touched)\\\">\\r\\n              <p *ngIf=\\\"editform.controls.LastName.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"company-name\\\">{{ 'Email' | translate }}</label>\\r\\n            <div class=\\\"input-group mb-3 required\\\">\\r\\n              <span class=\\\"input-group-addon\\\">\\r\\n                <i class=\\\"\\\">@</i>\\r\\n              </span>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"company-name\\\" placeholder=\\\"{{ 'Email' | translate }}\\\" [(ngModel)]=\\\"editModel.Email\\\" formControlName=\\\"Email\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-control-feedback validation-error\\\"\\r\\n                 *ngIf=\\\"editform.controls.Email.errors && (editform.controls.Email.dirty || editform.controls.Email.touched)\\\">\\r\\n              <p *ngIf=\\\"editform.controls.Email.errors.required\\\">{{ 'FieldIsRequired' | translate }}</p>\\r\\n              <p *ngIf=\\\"editform.controls.Email.errors.pattern\\\">{{ 'EmailNotValid' | translate }}</p>\\r\\n            </div>\\r\\n          </div>\\n          <div class=\\\"cntr\\\">\\r\\n            <label for=\\\"adminedit\\\" class=\\\"label-cbx\\\">\\r\\n              <input id=\\\"adminedit\\\" type=\\\"checkbox\\\" class=\\\"invisible\\\" [(ngModel)]=\\\"editModel.isAdmin\\\">\\r\\n              <div class=\\\"checkbox\\\">\\r\\n                <svg width=\\\"20px\\\" height=\\\"20px\\\" viewBox=\\\"0 0 20 20\\\">\\r\\n                  <path d=\\\"M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z\\\"></path>\\r\\n                  <polyline points=\\\"4 11 8 15 16 6\\\"></polyline>\\r\\n                </svg>\\r\\n              </div>\\r\\n              <span>{{ 'IsAdmin' | translate }}</span>\\r\\n            </label>\\r\\n          </div>\\n          <div class=\\\"cntr\\\">\\r\\n            <label for=\\\"IsActiveEdit\\\" class=\\\"label-cbx\\\">\\r\\n              <input id=\\\"IsActiveEdit\\\" type=\\\"checkbox\\\" class=\\\"invisible\\\" [(ngModel)]=\\\"editModel.IsActive\\\">\\r\\n              <div class=\\\"checkbox\\\">\\r\\n                <svg width=\\\"20px\\\" height=\\\"20px\\\" viewBox=\\\"0 0 20 20\\\">\\r\\n                  <path d=\\\"M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z\\\"></path>\\r\\n                  <polyline points=\\\"4 11 8 15 16 6\\\"></polyline>\\r\\n                </svg>\\r\\n              </div>\\r\\n              <span>{{ 'IsActive' | translate }}</span>\\r\\n            </label>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n          <button *ngIf=\\\"!editform.valid\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"edit.emit(editModel)\\\" disabled>{{ 'Save' | translate }}</button>\\r\\n          <button *ngIf=\\\"editform.valid\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"edit.emit(editModel)\\\">{{ 'Save' | translate }}</button>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">{{ 'Close' | translate }}</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/components/users-list/users-list.html\n// module id = ../../../../../src/app/users/components/users-list/users-list.html\n// module chunks = users.module","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/components/users-list/users-list.scss\n// module id = ../../../../../src/app/users/components/users-list/users-list.scss\n// module chunks = users.module","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { UsersListItem } from '../../models/users-list-item.model';\r\nimport { AddEmployee } from '../../models/add-employee.model';\nimport { InviteEmployee } from '../../models/invite-employee.model';\r\nimport { UsersListPagingModel } from '../../models/users-list-paging.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'up-users-list',\r\n    templateUrl: './users-list.html',\r\n    styleUrls: ['./users-list.scss']\r\n\r\n})\r\nexport class UsersListComponent {\r\n    @Input() users: UsersListItem[];\r\n    @Input() isLoaded: boolean = false;\r\n    @Input() loading: boolean = false;\r\n    @Input() pagingModel: UsersListPagingModel;\r\n    @Output() order = new EventEmitter<string>();\r\n    @Output() changePage = new EventEmitter<UsersListPagingModel>();\r\n    @Output() add = new EventEmitter<AddEmployee>();\r\n    @Output() invite = new EventEmitter<InviteEmployee>();\n    @Output() reinvite = new EventEmitter<number>();\n    @Output() edit = new EventEmitter<UsersListItem>();\r\n\r\n    addEmployee: AddEmployee = {\r\n        Email: \"\",\r\n        FirstName: \"\",\r\n        LastName: \"\",\r\n        Password: \"\",\r\n        PhoneNumber: \"\",\n        IsAdmin: false\r\n    };\r\n    inviteModel: InviteEmployee = {\n        Email: \"\",\n        FirstName: \"\",\n        LastName: \"\",\n        IsAdmin: false\r\n    };\n\n    editModel: UsersListItem = {\n        email: \"\",\n        firstName: \"\",\n        id: 0,\n        isActive: true,\n        isAdmin: true,\n        isOvertimeCalculated: true,\n        last4Ss: \"\",\n        lastName: \"\",\n        phone: \"\",\n        InviteOn: new Date(),\n        IsRegistrate: true\r\n    }\n\n    cloneEditUser(user: UsersListItem) {\r\n        this.editModel = Object.assign({}, user);\r\n    }\r\n\r\n    addform: FormGroup;\r\n    inviteform: FormGroup;\n    editform: FormGroup;\r\n\r\n    constructor(private translate: TranslateService) {\r\n        translate.addLangs([\"en\", \"fr\"]);\r\n        translate.setDefaultLang('en');\r\n    }\r\n\r\n    getArrowClass(field: string): string {\r\n        if (field != this.pagingModel.orderBy)\r\n            return \"fa fa-sort\";\r\n        if (this.pagingModel.IsAscending)\r\n            return \"fa fa-sort-asc\";\r\n        return \"fa fa-sort-desc\";\r\n    }\n\r\n    ngOnInit() {\r\n        this.inviteform = new FormGroup({\n            FirstName: new FormControl('', Validators.required),\r\n            LastName: new FormControl('', Validators.required),\r\n            Email: new FormControl('', Validators.pattern(\"^.+@.+\\\\..+$\"))\r\n        });\n\n        this.editform = new FormGroup({\n            FirstName: new FormControl('', Validators.required),\r\n            LastName: new FormControl('', Validators.required),\r\n            Email: new FormControl('', Validators.pattern(\"^.+@.+\\\\..+$\"))\r\n        });\r\n\r\n        this.addform = new FormGroup({\r\n            FirstName: new FormControl('', Validators.required),\r\n            LastName: new FormControl('', Validators.required),\r\n            Email: new FormControl('', Validators.pattern(\"^.+@.+\\\\..+$\")),\r\n            Password: new FormControl('', Validators.minLength(8)),\r\n            PhoneNumber: new FormControl('', Validators.required)\r\n        });\r\n    }\n\n    oldIvite(user: UsersListItem): boolean\n    {\n        let inviteTime = new Date(user.InviteOn);\n        let dateNow = new Date();\r\n        let diffMs = (+dateNow.valueOf() - +inviteTime.valueOf());\n        var days = (diffMs / (1000 * 60 * 60 * 24));\n        return days >= 14;\n    }\n\n    cleanAddModel() {\n      this.addEmployee = {\r\n        Email: \"\",\r\n        FirstName: \"\",\r\n        LastName: \"\",\r\n        Password: \"\",\r\n        PhoneNumber: \"\",\n        IsAdmin: false\r\n      };\r\n    }\n\n    cleanInviteModel() {\n      this.inviteModel = {\r\n        Email: \"\",\n        FirstName: \"\",\n        LastName: \"\",\n        IsAdmin: false\r\n      };\r\n    }\n\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/components/users-list/users-list.ts","import 'rxjs/add/operator/take';\r\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport * as fromUsers from '../reducers';\r\nimport * as usersActions from '../actions/users';\r\n\r\nimport { AddEmployee } from '../models/add-employee.model';\nimport { InviteEmployee } from '../models/invite-employee.model';\r\nimport {UsersListPagingModel} from '../models/users-list-paging.model';\r\nimport {UsersListItem} from '../models/users-list-item.model';\r\n\r\n@Component({\r\n    selector: 'users-page',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `\r\n    <up-users-list [users]=\"users$ | async\" [pagingModel]=\"pagingModel$ | async\" [isLoaded]=\"isLoaded$ | async\" [loading]=\"loading$ | async\" \n    (order)=\"orderUser($event)\" (changePage)=\"changePage($event)\" (invite)=\"invite($event)\" (add)=\"add($event)\" (edit)=\"edit($event)\" (reinvite)=\"reinvite($event)\"></up-users-list>\r\n  `,\r\n})\r\nexport class UsersPageComponent {\r\n    users$: Observable<UsersListItem[]>;\r\n    isLoaded$: Observable<boolean>;\r\n    loading$: Observable<boolean>;\r\n    pagingModel$: Observable<UsersListPagingModel>;\r\n\r\n    constructor(private store: Store<fromUsers.State>) {\r\n        this.users$ = store.select(fromUsers.getUsersList);\r\n        this.isLoaded$ = store.select(fromUsers.getIsLoadedStatus);\r\n        this.loading$ = store.select(fromUsers.getLoadingStatus);\r\n        this.pagingModel$ = store.select(fromUsers.getPagingModel);\r\n    }\r\n\r\n    ngOnInit() {\r\n        let pagingModelView: UsersListPagingModel = {\r\n            orderBy: \"id\",\r\n            page: 1,\r\n            pageSize: 10,\r\n            IsAscending: true,\r\n            count: 1,\r\n            IsOrder: true\r\n        }\r\n        this.store.dispatch(new usersActions.GetAction(pagingModelView));\r\n    }\r\n    \r\n    orderUser(orderBy: string) {\r\n        let pagingModelView: UsersListPagingModel = {\r\n            orderBy: orderBy,\r\n            page: 1,\r\n            pageSize: 10,\r\n            IsAscending: true,\r\n            count: 1,\r\n            IsOrder: true\r\n        }\r\n        this.store.dispatch(new usersActions.GetAction(pagingModelView));\r\n    }\r\n\r\n    changePage(model: UsersListPagingModel)\r\n    {\r\n        this.store.dispatch(new usersActions.GetAction(model));\r\n    }\r\n\r\n    add(model: AddEmployee)\r\n    {\r\n        this.store.dispatch(new usersActions.SaveAction(model));\r\n    }\r\n\r\n    invite(model: InviteEmployee)\r\n    {\r\n        this.store.dispatch(new usersActions.InviteAction(model));\r\n    }\n\n    reinvite(id: number)\n    {\n        this.store.dispatch(new usersActions.ReInviteAction(id));\r\n    }\n\n    edit(model: UsersListItem)\r\n    {\r\n        this.store.dispatch(new usersActions.EditAction(model));\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/containers/users-page.ts","import 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/operator/skip';\r\nimport 'rxjs/add/operator/takeUntil';\r\nimport { Injectable, InjectionToken, Optional, Inject } from '@angular/core';\r\nimport { Effect, Actions, toPayload } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { async } from 'rxjs/scheduler/async';\r\nimport { empty } from 'rxjs/observable/empty';\r\nimport { of } from 'rxjs/observable/of';\r\n\r\nimport { UsersService } from '../users.service';\r\nimport * as usersActions from '../actions/users';\r\nimport { UsersListItem } from '../models/users-list-item.model';\r\nimport { UsersList } from '../models/user-list.model';\r\nimport { UsersListPagingModel } from '../models/users-list-paging.model';\r\nimport { AddEmployee } from '../models/add-employee.model';\r\nimport { InviteEmployee } from '../models/invite-employee.model';\r\n\r\n@Injectable()\r\nexport class UsersEffects {\r\n\r\n    pagingModel: UsersListPagingModel;\r\n\r\n    @Effect()\r\n    get$: Observable<Action> = this.actions$\r\n        .ofType(usersActions.GET)\r\n        .map(toPayload)\r\n        .switchMap((query: UsersListPagingModel) => {\r\n            const nextGet$ = this.actions$.ofType(usersActions.GET).skip(1);\r\n            this.pagingModel = query;\r\n            return this.usersService\r\n                .getUsersList(query)\r\n                .takeUntil(nextGet$)\r\n                .map((users: UsersList) => new usersActions.GetCompleteAction(users))\r\n                .catch(() => of(new usersActions.GetCompleteAction(null)));\r\n        });\r\n\r\n    @Effect()\r\n    add$: Observable<Action> = this.actions$\r\n        .ofType(usersActions.ADD)\r\n        .map(toPayload)\r\n        .switchMap((query: AddEmployee) => {\r\n            const nextGet$ = this.actions$.ofType(usersActions.ADD).skip(1);\r\n            return this.usersService\r\n                .addEmployee(query)\r\n                .takeUntil(nextGet$)\r\n                .map((result: any) => new usersActions.SaveCompleteAction(result))\r\n                .catch(() => of(new usersActions.SaveCompleteAction(null)));\r\n        });\r\n\r\n    @Effect()\r\n    invite$: Observable<Action> = this.actions$\r\n        .ofType(usersActions.INVITE)\r\n        .map(toPayload)\r\n        .switchMap((query: InviteEmployee) => {\r\n            const nextGet$ = this.actions$.ofType(usersActions.INVITE).skip(1);\r\n            return this.usersService\r\n                .inviteEmployee(query)\r\n                .takeUntil(nextGet$)\r\n                .map((result: any) => new usersActions.InviteCompleteAction(result))\r\n                .catch(() => of(new usersActions.InviteCompleteAction(null)));\r\n        });\r\n\r\n    @Effect()\r\n    reinvite$: Observable<Action> = this.actions$\r\n        .ofType(usersActions.REINVITE)\r\n        .map(toPayload)\r\n        .switchMap((query: number) => {\r\n            const nextGet$ = this.actions$.ofType(usersActions.REINVITE).skip(1);\r\n            return this.usersService\r\n                .reinviteEmployee(query)\r\n                .takeUntil(nextGet$)\r\n                .map((result: any) => new usersActions.ReInviteCompleteAction(result))\r\n                .catch(() => of(new usersActions.ReInviteCompleteAction(null)));\r\n        });\r\n\r\n\r\n\r\n    @Effect()\r\n    edit$: Observable<Action> = this.actions$\r\n        .ofType(usersActions.EDIT)\r\n        .map(toPayload)\r\n        .switchMap((query: UsersListItem) => {\r\n            const nextGet$ = this.actions$.ofType(usersActions.EDIT).skip(1);\r\n            return this.usersService\r\n                .editEmployee(query)\r\n                .takeUntil(nextGet$)\r\n                .map((result: any) => new usersActions.EditCompleteAction(result))\r\n                .catch(() => of(new usersActions.EditCompleteAction(null)));\r\n        });\r\n\r\n    @Effect()\r\n    update$: Observable<Action> = this.actions$\r\n        .ofType(usersActions.ADD_COMPLETE, usersActions.EDIT_COMPLETE, usersActions.INVITE_COMPLETE, usersActions.REINVITE_COMPLETE)\r\n        .map(toPayload)\r\n        .switchMap((query: any) => {\r\n            const nextGet$ = this.actions$.ofType(usersActions.GET_COMPLETE);\r\n            return this.usersService\r\n                .getUsersList(this.pagingModel)\r\n                .takeUntil(nextGet$)\r\n                .map((users: UsersList) => new usersActions.GetCompleteAction(users))\r\n                .catch(() => of(new usersActions.GetCompleteAction(null)));\r\n        });\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private usersService: UsersService\r\n    ) { }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/effects/users.ts","import {\r\nActionReducerMap,\r\ncreateSelector,\r\ncreateFeatureSelector,\r\ncompose,\r\nActionReducer,\r\ncombineReducers,\r\nAction,\r\nActionReducerFactory,\r\nMemoizedSelector,\r\n} from '@ngrx/store';\r\n\r\nimport * as fromUsers from './users';\r\n\r\nexport interface UsersState {\r\n    usersPage: fromUsers.State;\r\n}\r\n\r\nexport interface State extends fromUsers.State {\r\n    'usersPage': UsersState;\r\n}\r\n\r\nexport const reducers = {\r\n    usersPage: fromUsers.reducer\r\n};\r\n\r\nexport const getUsersState = createFeatureSelector<UsersState>('usersPage');\r\nexport const getUsersEntityState = createSelector(\r\n    getUsersState,\r\n    (state: UsersState) => state.usersPage\r\n);\r\nexport const getUsersList = createSelector(\r\n    getUsersEntityState,\r\n    fromUsers.getUsers\r\n);\r\nexport const getLoadingStatus = createSelector(\r\n    getUsersEntityState,\r\n    fromUsers.getLoadingStatus\r\n);\r\nexport const getIsLoadedStatus = createSelector(\r\n    getUsersEntityState,\r\n    fromUsers.getIsLoadedStatus\r\n);\r\nexport const getPagingModel = createSelector(\r\n    getUsersEntityState,\r\n    fromUsers.getPagingModel\r\n);\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/reducers/index.ts","import { createSelector } from '@ngrx/store';\r\nimport {UsersListItem} from '../models/users-list-item.model'\r\nimport * as usersActions from '../actions/users';\r\nimport { UsersListPagingModel } from \"../models/users-list-paging.model\";\r\nimport { UsersList } from \"../models/user-list.model\";\r\n\r\nexport interface State {\r\n    users: UsersListItem[];\r\n    isLoaded: boolean;\r\n    loading: boolean;\r\n    pagingModel: UsersListPagingModel;\r\n}\r\n\r\nexport const initialState: State = {\r\n    users: [],\r\n    isLoaded: false,\r\n    loading: false,\r\n    pagingModel: {\r\n        orderBy: \"id\",\r\n        page: 1,\r\n        pageSize: 10,\r\n        IsAscending: true,\r\n        count: 1,\r\n        IsOrder: true\r\n    }\r\n};\r\n\r\nexport function reducer(\r\n    state = initialState,\r\n    action: usersActions.Actions\r\n): State {\r\n    switch (action.type) {\r\n        case usersActions.GET:\r\n            const pagingModel = action.payload as UsersListPagingModel;\r\n            pagingModel.IsAscending = !pagingModel.IsOrder ? state.pagingModel.IsAscending : pagingModel != null ? pagingModel.orderBy != state.pagingModel.orderBy || !state.pagingModel.IsAscending : true;\r\n            {\r\n                return {\r\n                    users: state.users,\r\n                    isLoaded: true,\r\n                    loading: true,\r\n                    pagingModel: pagingModel,\r\n                };\r\n            }\r\n\r\n        case usersActions.GET_COMPLETE: {\r\n            const loadedUsers = action.payload as UsersList;\r\n            return {\r\n                users: loadedUsers.Results,\r\n                isLoaded: true,\r\n                loading: false,\r\n                pagingModel: {\r\n                    IsAscending: state.pagingModel.IsAscending,\r\n                    count: loadedUsers.Count,\r\n                    orderBy: state.pagingModel.orderBy,\r\n                    page: state.pagingModel.page,\r\n                    pageSize: state.pagingModel.pageSize,\r\n                    IsOrder: true\r\n                }\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const getUsers = (state: State) => state.users;\r\nexport const getLoadingStatus = (state: State) => state.loading;\r\nexport const getIsLoadedStatus = (state: State) => state.isLoaded;\r\nexport const getPagingModel = (state: State) => state.pagingModel;\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/reducers/users.ts","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AlwaysAuthGuard } from '../AlwaysAuthGuard' \r\nimport { TaskManagerAuthGuard } from '../TaskManagerAuthGuard' \r\n\r\nimport { UsersPageComponent} from './containers/users-page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: UsersPageComponent,\r\n        canActivate: [AlwaysAuthGuard, TaskManagerAuthGuard],\r\n        data: {\r\n            title: 'Users'\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/users-routing.module.ts","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpModule} from '@angular/http';\r\nimport {FormsModule} from '@angular/forms';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\n\r\nimport { UsersRoutingModule } from './users-routing.module';\r\nimport {UsersService} from './users.service';\r\nimport { UsersPageComponent} from './containers/users-page';\r\nimport {UsersEffects} from './effects/users';\r\nimport {ComponentsModule} from './components/index'\r\nimport { reducers } from './reducers';\r\n\r\n@NgModule({\r\n    imports: [\r\n        HttpModule,\r\n        FormsModule,\r\n        CommonModule,\r\n        UsersRoutingModule,\r\n        ComponentsModule,\r\n        StoreModule.forFeature('usersPage', reducers),\r\n        EffectsModule.forFeature([UsersEffects])\r\n    ],\r\n    declarations: [\r\n        UsersPageComponent\r\n    ],\r\n    providers: [UsersService]\r\n})\r\nexport class UsersModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/users.module.ts","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { UsersListPagingModel } from './models/users-list-paging.model'\r\nimport { UsersListItem } from './models/users-list-item.model'\r\nimport { UsersList } from './models/user-list.model'\r\nimport { RequestService } from '../services/RequestService'\nimport { AddEmployee } from './models/add-employee.model';\r\nimport { InviteEmployee } from './models/invite-employee.model';\r\n\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n    constructor(private requestService: RequestService) { }\r\n\r\n    getUsersList(pagingModel: UsersListPagingModel): Observable<UsersList> {\r\n        return this.requestService.post<UsersList>(\"/api/GetUsers/\", pagingModel);\r\n    }\n\n    addEmployee(model: AddEmployee): Observable<any> {\r\n        return this.requestService.post<any>(\"/api/AddEmployee/\", model);\r\n    }\n\n    inviteEmployee(model: InviteEmployee): Observable<any> {\r\n        return this.requestService.post<any>(\"/api/InviteEmployee\",model);\r\n    }\n\n    editEmployee(model: UsersListItem): Observable<any> {\r\n        return this.requestService.post<any>(\"/api/EditEmployee\", model);\r\n    }\n\n    reinviteEmployee(id: number): Observable<any> {\r\n        return this.requestService.get<any>(\"/api/ReInviteEmployee?id=\" + id);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Projects/TimeGo/src/TimeGo.Web.Mvc/TimeGo/src/app/users/users.service.ts"],"sourceRoot":"webpack:///"}